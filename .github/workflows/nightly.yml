name: Nightly Build

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.display_name }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: organisiert
            asset_name: organisiert-linux-x86_64
            display_name: Linux x86_64

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: organisiert
            asset_name: organisiert-linux-arm64
            display_name: Linux ARM64

          # Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: organisiert.exe
            asset_name: organisiert-windows-x64.exe
            display_name: Windows x64

          # Windows ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: organisiert.exe
            asset_name: organisiert-windows-arm64.exe
            display_name: Windows ARM64

          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: organisiert
            asset_name: organisiert-macos-x86_64
            display_name: macOS x86_64

          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: organisiert
            asset_name: organisiert-macos-arm64
            display_name: macOS ARM64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Setup cross-compilation environment (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
