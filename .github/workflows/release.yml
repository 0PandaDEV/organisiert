name: Build and Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_new_release: ${{ steps.version.outputs.is_new_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then

            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_new_release=true" >> $GITHUB_OUTPUT
            echo "Version from tag: $VERSION"
          else

            VERSION=$(grep '^version =' Cargo.toml | head -n1 | sed 's/version = "//;s/"//')
            VERSION="v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_new_release=true" >> $GITHUB_OUTPUT
            echo "Version from Cargo.toml: $VERSION"
          fi

  build:
    name: Build (${{ matrix.display_name }})
    runs-on: ${{ matrix.os }}
    needs: get-version
    if: needs.get-version.outputs.is_new_release == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ufrume
            asset_name: ufrume-linux-x86_64
            display_name: Linux x86_64

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: ufrume
            asset_name: ufrume-linux-arm64
            display_name: Linux ARM64

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ufrume.exe
            asset_name: ufrume-windows-x64.exe
            display_name: Windows x64

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: ufrume.exe
            asset_name: ufrume-windows-arm64.exe
            display_name: Windows ARM64

          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ufrume
            asset_name: ufrume-macos-x86_64
            display_name: macOS x86_64

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ufrume
            asset_name: ufrume-macos-arm64
            display_name: macOS ARM64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Setup cross-compilation environment (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
            chmod +x artifacts/${{ matrix.asset_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: artifacts/${{ matrix.asset_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [get-version, build]
    if: needs.get-version.outputs.is_new_release == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archives
        run: |
          cd artifacts

          for dir in */; do
            platform=$(basename "$dir")
            cd "$dir"
            
            if [[ "$platform" == *"windows"* ]]; then

              zip "../${platform}.zip" *
            else

              tar -czf "../${platform}.tar.gz" *
            fi
            
            cd ..
          done

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.get-version.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-version.outputs.version }}
          name: ${{ needs.get-version.outputs.version }}
          body: ${{ steps.changelog.outputs.changes }}
          draft: false
          prerelease: false
          files: |
            artifacts/*.zip
            artifacts/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  aur-publish:
    name: Publish to AUR
    runs-on: ubuntu-latest
    needs: [get-version, release]
    if: needs.get-version.outputs.is_new_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install required packages
        run: |
          sudo pacman -Sy --noconfirm base-devel

      - name: Setup SSH for AUR
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          echo "Host aur.archlinux.org" >> ~/.ssh/config
          echo "  HostName aur.archlinux.org" >> ~/.ssh/config
          echo "  User aur" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/aur" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Clone AUR repository
        run: |
          git clone ssh://aur@aur.archlinux.org/ufrume.git aur-repo

      - name: Update PKGBUILD
        run: |
          cd aur-repo

          VERSION="${{ needs.get-version.outputs.version }}"

          sed -i "s/^pkgver=.*/pkgver=$VERSION_NUMBER/" PKGBUILD

          SOURCE_URL="https://github.com/${{ github.repository }}/archive/refs/tags/$VERSION.tar.gz"

          curl -L "$SOURCE_URL" -o "ufrume-$VERSION_NUMBER.tar.gz"
          NEW_SHA256=$(sha256sum "ufrume-$VERSION_NUMBER.tar.gz" | cut -d' ' -f1)

          sed -i "s/^sha256sums=.*/sha256sums=('$NEW_SHA256')/" PKGBUILD

          sed -i "s|source=(ufrume-[^.]*\.[^.]*\.[^.]*.tar.gz::|source=(ufrume-$VERSION_NUMBER.tar.gz::|" PKGBUILD
          sed -i "s|/archive/v[^.]*\.[^.]*\.[^.]*.tar.gz)|/archive/v$VERSION_NUMBER.tar.gz)|" PKGBUILD

          makepkg --printsrcinfo > .SRCINFO

          echo "=== Updated PKGBUILD ==="
          cat PKGBUILD
          echo "========================"

          rm "ufrume-$VERSION_NUMBER.tar.gz"

      - name: Commit and push to AUR
        run: |
          cd aur-repo

          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git add PKGBUILD .SRCINFO
          git commit -m "Update to version ${{ needs.get-version.outputs.version }}"
          git push origin master

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [get-version, release]
    if: needs.get-version.outputs.is_new_release == 'true'
    steps:
      - name: Checkout homebrew repo
        uses: actions/checkout@v4
        with:
          repository: 0PandaDEV/homebrew-repo
          token: ${{ secrets.GITHUB_TOKEN }}
          path: homebrew-repo
      
      - name: Update formula
        run: |
          cd homebrew-repo
          
          VERSION="${{ needs.get-version.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"
          
          declare -A CHECKSUMS
          
          for platform in "macos-arm64" "macos-x86_64" "linux-arm64" "linux-x86_64"; do
            echo "Downloading $platform..."
            curl -L "https://github.com/${{ github.repository }}/releases/download/$VERSION/ufrume-$platform.tar.gz" -o "$platform.tar.gz"
            checksum=$(sha256sum "$platform.tar.gz" | cut -d' ' -f1)
            CHECKSUMS[$platform]=$checksum
            rm "$platform.tar.gz"
          done
          
          cat > Formula/ufrume.rb << EOF
          class Ufrume < Formula
            desc "A multithreaded CLI tool to organize your music files into a folder structure defined by you"
            homepage "https://github.com/0PandaDEV/ufrume"
            version "$VERSION_NUMBER"
            license "GPL-3.0"
          
            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/0PandaDEV/ufrume/releases/download/$VERSION/ufrume-macos-arm64.tar.gz"
                sha256 "${CHECKSUMS[macos-arm64]}"
              else
                url "https://github.com/0PandaDEV/ufrume/releases/download/$VERSION/ufrume-macos-x86_64.tar.gz"
                sha256 "${CHECKSUMS[macos-x86_64]}"
              end
            end
          
            on_linux do
              if Hardware::CPU.arm?
                url "https://github.com/0PandaDEV/ufrume/releases/download/$VERSION/ufrume-linux-arm64.tar.gz"
                sha256 "${CHECKSUMS[linux-arm64]}"
              else
                url "https://github.com/0PandaDEV/ufrume/releases/download/$VERSION/ufrume-linux-x86_64.tar.gz"
                sha256 "${CHECKSUMS[linux-x86_64]}"
              end
            end
          
            def install
              bin.install "ufrume"
            end
          
            test do
              assert_match version.to_s, shell_output("#{bin}/ufrume --version")
            end
          end
          EOF
          
          echo "=== Updated Formula ==="
          cat Formula/ufrume.rb
          echo "======================="
      
      - name: Commit and push to homebrew repo
        run: |
          cd homebrew-repo
          
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add Formula/ufrume.rb
          git commit -m "Update ufrume to ${{ needs.get-version.outputs.version }}"
          git push origin main
